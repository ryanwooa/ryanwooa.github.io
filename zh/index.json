[{"content":"1. 介绍 1.1 什么是Hugo Hugo 是用 Go 语言写的静态网站生成器（Static Site Generator），可以把 Markdown 文件转化成 HTML 文件。具有简单、易用、高效、易扩展、快速部署的特点。\n1.2 什么是Github Pages GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，（可选）通过构建过程运行文件，然后发布网站。 用户可以在 GitHub 的 github.io 域或自己的自定义域上托管站点。\nGithub Pages用户手册\n2. 准备工作 这篇教程假设你已经了解了Git和Github的基本使用，如果不了解，可以参考 廖雪峰的Git教程。\n2.1 运行环境 你需要安装以下环境：\nGit Hugo 自己习惯使用的IDE，比如VSCode 2.2 安装Hugo 本人使用的是Windows11系统，安装过程参考如下：\nHugo是使用Go语言编写，所以需要先安装Go语言环境，Go语言下载地址 下载对应版本的Hugo二进制文件，Hugo下载地址 (本文发布日期：2024-2-11，如有新版请自行更新) 解压下载的Hugo压缩包，将hugo.exe文件添加到你的PATH环境变量中 打开命令行，输入hugo version，如果显示版本号则安装成功 其他系统的Hugo安装可以参考Hugo安装教程\n2.3 创建Github仓库 创建2个Github仓库，一个用于储存Hugo博客源码，一个用于储存Hugo博客生成的静态网页。\n创建Github Pages仓库， 命名为\u0026lt;username\u0026gt;.github.io，其中\u0026lt;username\u0026gt;是你的Github用户名，这个仓库用于储存Hugo博客生成的静态网页。 该仓库需要设置为Public，否则无法通过浏览器访问。 勾选添加README文件，这会设置 main 分支为仓库的默认主分支，这在后面提交推送博客内容时很重要。 创建博客源仓库 命名为你想要的名称，这个仓库用于储存Hugo博客的源码。 该仓库可以是Public或Private，根据你的需要设置。 创建完成后将该仓库克隆到本地，作为Hugo创建博客的工作目录。 3. 使用Hugo搭建博客 3.1 初始化Hugo博客 进入克隆下的博客源仓库目录，在PowerShell中运行hugo new site \u0026lt;site_name\u0026gt;，其中\u0026lt;site_name\u0026gt;是你的博客名称\nhugo new site MyFreshWebsite --format yaml --format yaml是指定配置文件格式为yaml格式。该文件格式个人觉得更直观一些\n创建后生成7个主要文件夹和一个文件（图中有后期添加文件夹，仅做参考） archetypes: 存放新文章的模板 content: 寸法博客文章内容 data: 存放数据文件的文件夹，不用管 layouts: 自定义HTML public: 存放生成的静态网页 static: 存放静态文件,如图片，图标等 themes: 存放主题 hugo.yml: 博客配置文件 3.2 hugo.yml配置 打开hugo.yml文件，参考配置如下：\nbaseURL: \u0026#34;https://\u0026lt;yourname\u0026gt;.github.io/\u0026#34; # 你的Github Pages地址 languageCode: en-us title: \u0026lt;Your Nmae\u0026gt; # 你的博客名称 theme: \u0026lt;theme_name\u0026gt; # 你的博客主题 enableInlineShortcodes: true #允许内联短码 enableEmoji: true # 允许使用 Emoji 表情，建议 true enableRobotsTXT: true # 允许爬虫抓取到搜索引擎，建议 true hasCJKLanguage: true # 自动检测是否包含 中文日文韩文 如果文章中使用了很多中文引号的话可以开启 buildDrafts: false buildFuture: false buildExpired: false #googleAnalytics: UA-123-45 # 谷歌统计 # Copyright: Sulv paginate: 15 # 每页显示的文章数 minify: disableXML: true minifyOutput: true permalinks: #浏览器链接显示方式 post: \u0026#34;/:title/\u0026#34; # post: \u0026#34;/:year/:month/:day/:title/\u0026#34; defaultContentLanguage: en # 最顶部首先展示的语言页面 defaultContentLanguageInSubdir: true languages: en: languageName: \u0026#34;English\u0026#34; weight: 1 menu: main: - name: Articles url: posts/ weight: 1 - name: Tags url: tags/ weight: 10 - name: Search url: search/ weight: 11 zh: languageName: \u0026#34;中文\u0026#34; weight: 2 menu: main: - name: 文章 url: posts/ weight: 1 - name: 标签 url: tags/ weight: 10 - name: 搜索 url: search/ weight: 11 params: socialIcons: - name: github title: View Source on Github url: \u0026#34;https://github.com/ryanwooa\u0026#34; - name: Instagram # title: Share PaperMod on X/Twitter url: \u0026#34;https://www.instagram.com/ryanwu5_/\u0026#34; - name: X title: url: \u0026#34;https://twitter.com/nzw897\u0026#34; - name: linkedin title: url: \u0026#34;https://www.linkedin.com/in/ryan-wu-9b8161268/\u0026#34; ShowBreadCrumbs: true ShowRelatedPosts: true ShowPostNavLinks: true ShowCodeCopyButtons: true ShowReadingTime: true label: icon: \u0026#34;q3.png\u0026#34; env: production author: Ryan Wu defaultTheme: auto disableThemeToggle: false DateFormat: \u0026#34;2006-01-02\u0026#34; ShowShareButtons: true ShowReadingTime: true # disableSpecialistPost: true displayFullLangName: true ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: true hideFooter: false # 隐藏页脚 ShowWordCounts: true VisitCount: true ShowLastMod: true #显示文章更新时间 ShowToc: true # 显示目录 TocOpen: true # 自动展开目录 assets: favicon: \u0026#34;q3.png\u0026#34; favicon16x16: \u0026#34;q3.png\u0026#34; favicon32x32: \u0026#34;q3.png\u0026#34; apple_touch_icon: \u0026#34;q3.png\u0026#34; safari_pinned_tab: \u0026#34;q3.png\u0026#34; outputs: home: - HTML - RSS - JSON # necessary for search taxonomies: tag: tags category: categories 4. 安装配置Hugo主题 Hugo主题中提供了很多主题供选择，可以根据自己的喜好选择一个主题。这里以[PaperMod](https://github.com/adityatelange/hugo-PaperMod主题为例。\n根据PaperMod安装指南，可以通过以下命令安装PaperMod主题：\ngit submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive # needed when you reclone your repo (submodules may not get cloned automatically) 这时可以看到在themes文件夹中，多出了刚刚安装的主题文件，代表主题安装成功。 在hugo.yml文件中添加下面的语句配置主题：\ntheme: PaperMod 更多PaperMod配置可以参考PaperMod特性\n5. 用Hugo创建新文章 Hugo中创建新文章非常简单，只需要在终端中输入以下命令：\nhugo new xxx.md hugo new posts/xxx.md #可以指定文章的目录 使用该命令创建的Markdown文件中会自动包含一些基本的信息，如文章标题、日期等。可以在Markdown文件中编辑文章内容。 draft = true 指这篇文章目前为草稿, 如果希望文章在网站上显示，需要将draft设置为false或删除该行\n6. 本地调试预览 在创建好Hugo网站后，可以通过以下命令在本地预览网站：\nhugo server 本地预览网址为localhost:1313\n7. 使用Github Action部署到Github Pages GitHub Actions 是一种持续集成和持续交付 (CI/CD) 平台，可用于自动执行生成、测试和部署管道。 本文使用Github Action自动部署Hugo博客到Github Pages。\n7.1 配置Workflow 在项目根目录下创建.github/workflows文件夹，以.yml 为后缀创建workflow文件。我的 GitHub Action 自动发布文件main.yml示例配置如下：\nname: GitHub Pages on: push: branches: - main # 博客根目录的默认分支，这里是main，有时也是master pull_request: jobs: deploy: runs-on: ubuntu-22.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v4 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # 填写你的hugo版本，可用hugo version查看 extended: true # 如果你使用的不是extended版本的hugo，将true改为false - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; # 注意填写main或者master with: personal_token: ${{ secrets.PERSONAL_BLOG}} # 如果secret取了其他名称，将MY_PAT替换掉 external_repository: ryanwooa/ryanwooa.github.io # 填写远程仓库，不一定是这个格式，按照自己的情况写 publish_dir: ./public #cname: www.example.com # 填写你的自定义域名。如果没有用自定义域名，注释掉这行 其中secrets.PERSONAL_BLOG是在GitHub仓库的Settings-\u0026gt;Secrets中添加的个人访问令牌，用于GitHub Action自动部署到GitHub Pages。\n这个令牌在个人账户的Settings-\u0026gt;Developer settings-\u0026gt;Personal access tokens中生成，需要有repo和workflow权限。\n7.2 发布到Github Pages 在完成上述配置后，每次在本地修改完文章后，只需要将修改推送到GitHub仓库，GitHub Action就会将Hugo生成的网页部署到Github Pages仓库中的gh-pages分支下。\n8. Reference 如何用 GitHub Pages + Hugo 搭建个人博客 Hugo + GitHub Action，搭建你的博客自动发布系统 [置顶] hugo博客搭建 | PaperMod主题 Hugo官方文档 Github Pages用户手册 ","permalink":"https://ryanwooa.github.io/zh/posts/tech/hugo+papermod/","summary":"1. 介绍 1.1 什么是Hugo Hugo 是用 Go 语言写的静态网站生成器（Static Site Generator），可以把 Markdown 文件转化成 HTML 文件。具有简单、易用、高效、易","title":"Hugo + Github Pages 搭建个人博客"},{"content":"欢迎来到我的博客，这是第一篇文章！很高兴你能来看看。 ","permalink":"https://ryanwooa.github.io/zh/posts/life/helloworld/","summary":"欢迎来到我的博客，这是第一篇文章！很高兴你能来看看。","title":"Hello World"},{"content":"你可以在这里留言。我会尽快回复你。\n","permalink":"https://ryanwooa.github.io/zh/messagebox/","summary":"你可以在这里留言。我会尽快回复你。","title":"留言板"}]