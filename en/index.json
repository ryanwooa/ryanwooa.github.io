[{"content":"1. UI 1.1 Theme file location adjustment After installing the theme, you can copy the files circled in the following image to the corresponding directory on the site, so that you can customize the style of the blog without affecting the update of the theme.\nHugo will prioritize reading files from the site directory when loading, and if not, read files from the theme directory.\n1.2 Side Table of Contents Replace the code in layouts/partials/toc.html with the following： {{- $headers := findRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;(.|\\n])+?\u0026lt;/h[1-6]\u0026gt;\u0026#34; .Content -}} {{- $has_headers := ge (len $headers) 1 -}} {{- if $has_headers -}} \u0026lt;aside id=\u0026#34;toc-container\u0026#34; class=\u0026#34;toc-container wide\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;toc\u0026#34;\u0026gt; \u0026lt;details {{if (.Param \u0026#34;TocOpen\u0026#34;) }} open{{ end }}\u0026gt; \u0026lt;summary accesskey=\u0026#34;c\u0026#34; title=\u0026#34;(Alt + C)\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;details\u0026#34;\u0026gt;{{- i18n \u0026#34;toc\u0026#34; | default \u0026#34;Table of Contents\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;/summary\u0026gt; \u0026lt;div class=\u0026#34;inner\u0026#34;\u0026gt; {{- $largest := 6 -}} {{- range $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{- if lt $headerLevel $largest -}} {{- $largest = $headerLevel -}} {{- end -}} {{- end -}} {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice -}} \u0026lt;ul\u0026gt; {{- range seq (sub $firstHeaderLevel $largest) -}} \u0026lt;ul\u0026gt; {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (sub (add $largest .) 1) -}} {{- end -}} {{- range $i, $header := $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{/* get id=\u0026#34;xyz\u0026#34; */}} {{- $id := index (findRE \u0026#34;(id=\\\u0026#34;(.*?)\\\u0026#34;)\u0026#34; $header 9) 0 }} {{- /* strip id=\u0026#34;\u0026#34; to leave xyz, no way to get regex capturing groups in hugo */ -}} {{- $cleanedID := replace (replace $id \u0026#34;id=\\\u0026#34;\u0026#34; \u0026#34;\u0026#34;) \u0026#34;\\\u0026#34;\u0026#34; \u0026#34;\u0026#34; }} {{- $header := replaceRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;((.|\\n])+?)\u0026lt;/h[1-6]\u0026gt;\u0026#34; \u0026#34;$1\u0026#34; $header -}} {{- if ne $i 0 -}} {{- $prevHeaderLevel := index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub $i 1)) 1) 0 -}} {{- $prevHeaderLevel := len (seq $prevHeaderLevel) -}} {{- if gt $headerLevel $prevHeaderLevel -}} {{- range seq $prevHeaderLevel (sub $headerLevel 1) -}} \u0026lt;ul\u0026gt; {{/* the first should not be recorded */}} {{- if ne $prevHeaderLevel . -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; . -}} {{- end -}} {{- end -}} {{- else -}} \u0026lt;/li\u0026gt; {{- if lt $headerLevel $prevHeaderLevel -}} {{- range seq (sub $prevHeaderLevel 1) -1 $headerLevel -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) . -}} \u0026lt;/ul\u0026gt; {{/* manually do pop item */}} {{- $tmp := $.Scratch.Get \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Delete \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice}} {{- range seq (sub (len $tmp) 1) -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (index $tmp (sub . 1)) -}} {{- end -}} {{- else -}} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end -}} {{- end -}} {{- end }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- else }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- end -}} {{- end -}} \u0026lt;!-- {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} --\u0026gt; {{- $firstHeaderLevel := $largest }} {{- $lastHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub (len $headers) 1)) 1) 0)) }} \u0026lt;/li\u0026gt; {{- range seq (sub $lastHeaderLevel $firstHeaderLevel) -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) (add . $firstHeaderLevel) }} \u0026lt;/ul\u0026gt; {{- else }} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; \u0026lt;script\u0026gt; let activeElement; let elements; window.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function (event) { checkTocPosition(); elements = document.querySelectorAll(\u0026#39;h1[id],h2[id],h3[id],h4[id],h5[id],h6[id]\u0026#39;); // Make the first header active activeElement = elements[0]; const id = encodeURI(activeElement.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.add(\u0026#39;active\u0026#39;); }, false); window.addEventListener(\u0026#39;resize\u0026#39;, function(event) { checkTocPosition(); }, false); window.addEventListener(\u0026#39;scroll\u0026#39;, () =\u0026gt; { // Check if there is an object in the top half of the screen or keep the last item active activeElement = Array.from(elements).find((element) =\u0026gt; { if ((getOffsetTop(element) - window.pageYOffset) \u0026gt; 0 \u0026amp;\u0026amp; (getOffsetTop(element) - window.pageYOffset) \u0026lt; window.innerHeight/2) { return element; } }) || activeElement elements.forEach(element =\u0026gt; { const id = encodeURI(element.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); if (element === activeElement){ document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.add(\u0026#39;active\u0026#39;); } else { document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.remove(\u0026#39;active\u0026#39;); } }) }, false); const main = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--article-width\u0026#39;), 10); const toc = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--toc-width\u0026#39;), 10); const gap = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--gap\u0026#39;), 10); function checkTocPosition() { const width = document.body.scrollWidth; if (width - main - (toc * 2) - (gap * 4) \u0026gt; 0) { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.add(\u0026#34;wide\u0026#34;); } else { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.remove(\u0026#34;wide\u0026#34;); } } function getOffsetTop(element) { if (!element.getClientRects().length) { return 0; } let rect = element.getBoundingClientRect(); let win = element.ownerDocument.defaultView; return rect.top + win.pageYOffset; } \u0026lt;/script\u0026gt; {{- end }} Add the following styles in /assets/css/extended/blank.css :root { --nav-width: 1380px; --article-width: 650px; --toc-width: 300px; } .toc { margin: 0 2px 40px 2px; border: 1px solid var(--border); background: var(--entry); border-radius: var(--radius); padding: 0.4em; } .toc-container.wide { position: absolute; height: 100%; border-right: 1px solid var(--border); left: calc((var(--toc-width) + var(--gap)) * -1); top: calc(var(--gap) * 2); width: var(--toc-width); } .wide .toc { position: sticky; top: var(--gap); border: unset; background: unset; border-radius: unset; width: 100%; margin: 0 2px 40px 2px; } .toc details summary { cursor: zoom-in; margin-inline-start: 20px; padding: 12px 0; } .toc details[open] summary { font-weight: 500; } .toc-container.wide .toc .inner { margin: 0; } .active { font-size: 110%; font-weight: 600; } .toc ul { list-style-type: circle; } .toc .inner { margin: 0 0 0 20px; padding: 0px 15px 15px 20px; font-size: 16px; /*目录显示高度*/ max-height: 83vh; overflow-y: auto; } .toc .inner::-webkit-scrollbar-thumb { /*滚动条*/ background: var(--border); border: 7px solid var(--theme); border-radius: var(--radius); } .toc li ul { margin-inline-start: calc(var(--gap) * 0.5); list-style-type: none; } .toc li { list-style: none; font-size: 0.95rem; padding-bottom: 5px; } .toc li a:hover { color: var(--secondary); } Reference:\nHugo博客目录放在侧边 | PaperMod主题 1.3 Font Add the font file you want to use in the static/fonts/\nGlobal font Add CSS in /assets/css/extended/blank.css\nbody{ font-family: \u0026#39;circular-book\u0026#39;, sans-serif; } Code font Find .post-content code in /assets/css/common/post-single.css, add following：\n.post-content code { font-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace; } 1.4 Code block rounded corners Add CSS in /assets/css/common/post-single.css: .post-content .highlight pre { background-color: var(--theme) !important; margin: 0; } The rounded corner style of the inline block reference is also in this file, modify the following style： .post-content code { border-radius: 6px; } 2. Function 2.1 Content organization Each folder in the content folder needs to be added with a _index.md file, which can be filled with [Front Matter]（ https://gohugo.io/content-management/front-matter/ ）Used to control titles or other displays\n. └── content └── about | └── _index.md // \u0026lt;- https://example.com/about/ ├── post | ├── _index.md // \u0026lt;- https://example.com/post/ | ├── firstpost.md // \u0026lt;- https://example.com/post/firstpost/ | ├── happy | | └── ness.md // \u0026lt;- https://example.com/post/happy/ness/ | └── secondpost.md // \u0026lt;- https://example.com/post/secondpost/ └── quote ├── first.md // \u0026lt;- https://example.com/quote/first/ └── second.md // \u0026lt;- https://example.com/quote/second/ If you do not add a _index.md file to a folder, accessing the folder will directly display all the files in that folder, without displaying the folder\u0026rsquo;s title. After adding the _index.md file, the contents of the file will be displayed when accessing the folder. Sometimes not adding the file _index.md can result in incorrect access paths, so it is best to add it. Reference： Hugo-Content organization 2.2 Multilingual mode Config hugo.yml languageCode: en-us defaultContentLanguage: en languages: en: languageName: \u0026#34;English\u0026#34; weight: 1 menu: main: - name: Articles url: posts/ weight: 1 - name: Tags url: tags/ weight: 10 - name: Search url: search/ weight: 11 zh: languageName: \u0026#34;中文\u0026#34; weight: 2 menu: main: - name: 文章 url: posts/ weight: 1 - name: 标签 url: tags/ weight: 10 - name: 搜索 url: search/ weight: 11 There are two ways to organize the content in different languages: Create folders in different languages and place the corresponding content in the corresponding folder, as follows：\n```bash . └── content ├── en | └── _index.md | └── about.md ├── zh | └── _index.md | └── about.md When trying this method, I may not have set the folder\u0026rsquo;s _index.md file properly, which resulted in the inability to display any content. Therefore, I adopted the following method.\nSet multiple language versions for each file, for example：\n. └── content └── about | └── _index.md // \u0026lt;- https://example.com/about/ | └── about.en.md | └── about.zh.md Add title field to the about.md：\ntitle: \u0026#34;About\u0026#34; Add title field to the about.zh.md：\ntitle: \u0026#34;关于\u0026#34; More Reference： Hugo-Multilingual Mode 2.3 Search Create a new search.md file in the content directory, with the following content： title: \u0026#34;Search\u0026#34; # in any language you want layout: \u0026#34;search\u0026#34; # necessary for search # description: \u0026#34;Description for Search\u0026#34; summary: \u0026#34;search\u0026#34; placeholder: \u0026#34;Please enter search content\u0026#34; Add following code in hugo.yml menu: main: -identifier: Search name: Search url: search weight: ... Then you can see the search option in the nav and click to search.\n2.4 Comment For details: Hugo博客添加Twikoo评论 2.5 PV/UV statistics Use 不蒜子流量统计 ，add code in /layouts/common/footer.css:\n{{- if not (.Param \u0026#34;hideFooter\u0026#34;) }} \u0026lt;footer class=\u0026#34;footer\u0026#34;\u0026gt; {{- if site.Copyright }} ... {{- end }} \u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css\u0026#34;\u0026gt; Visitors: \u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; Views: \u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/footer\u0026gt; {{- end }} Then you can see the traffic and views in the footer.\n3. Optimization 3.1 Open link in new tab Create render-link.html in /layouts/_default/_markup/ with following content：\n\u0026lt;a href=\u0026#34;{{ .Destination | safeURL }}\u0026#34;{{ with .Title}} title=\u0026#34;{{ . }}\u0026#34;{{ end }}{{ if strings.HasPrefix .Destination \u0026#34;http\u0026#34; }} target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34;{{ end }}\u0026gt;{{ .Text | safeHTML }}\u0026lt;/a\u0026gt; All links within the article will be automatically added with target=\u0026quot;_blank\u0026quot; rel=\u0026quot;noopener\u0026quot;\nReference：\n在 Hugo Goldmark Markdown 中设置以新标签打开链接 Hugo - Markdown render hooks ","permalink":"https://ryanwooa.github.io/en/posts/tech/customize_hugo/","summary":"1. UI 1.1 Theme file location adjustment After installing the theme, you can copy the files circled in the following image to the corresponding directory on the site, so that you can customize the style of the blog without affecting the update of the theme. Hugo will prioritize reading files from the site directory when loading, and if not, read files from the theme directory. 1.2 Side Table of Contents","title":"Hugo + PaperMod Customization"},{"content":"1. Introduction 1.1 What is Hugo Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.\n1.2 What is Github Pages GitHub Pages is a static site hosting service that directly retrieves HTML, CSS, and JavaScript files from the repository on GitHub, (optional) runs the files through the build process, and then publishes the website.\nUsers can host sites on GitHub\u0026rsquo;s GitHub.io domain or their own custom domain.\nGithub Pages Doc 2. Preparation This tutorial assumes that you have already understood the basic usage of Git and Github. If you are not familiar, you can refer to Getting Git right 。\n2.1 Environment You need to install the following environment:\nGit Hugo IDEs that one is accustomed to using, such as VSCode 2.2 Install Hugo I am using a Windows 11 system, and the installation process is as follows:\nInstall Go language，Download - Go Download the archive of Hugo binary file，Hugo - latest release (This article was released on February 11, 2024. If there is a new version, please update it yourself) Extract the archive, move the executable to the desired directory. Add this directory to the PATH environment variable Open the PowerShell, run hugo version. If the version number is displayed, the installation is successful Hugo installation for other systems can refer to Hugo Installation 2.3 Setup Github repository Create two Github repositories, one for storing Hugo blog source code and one for storing static web pages generated by Hugo.\nCreate Github Pages repository\nName it like \u0026lt;username\u0026gt;.github.io, \u0026lt;username\u0026gt; is your Github username. This repository is used to store static web pages. Set to Public, otherwise it cannot be accessed through the browser. Check to add README file, which will set the main branch as the default main branch of the repository Create a blog source repository\nName it as you like, this repository is used to store the source code of the Hugo blog. Set it to Public or Private according to your needs. Clone the repository to your local machine as the working directory for creating the Hugo blog. 3. Create a blog with Hugo 3.1 Initialize a Hugo site In your cloned repository folder，open PowerShell and run hugo new site \u0026lt;site_name\u0026gt;，in which \u0026lt;site_name\u0026gt; is up to you to decide. For example:\nhugo new site MyFreshWebsite --format yaml --format yaml It is specified that the configuration file format is in yaml format. I personally think this file format is more intuitive\nAfter creation, generate 7 main folders and 1 file (there are added folders in the figure for reference only) archetypes: article templates content: store the content of the blog data: store data files layouts: store customized templates public: store the generated static web pages static: store static files such as images, CSS, and JavaScript themes: store the theme of the blog hugo.yml: the configuration file of the blog 3.2 hugo.yml configuration Open hugo.yml, modify the configuration according to your needs. The following is a simple example:\nbaseURL: \u0026#34;https://\u0026lt;yourname\u0026gt;.github.io/\u0026#34; # Your website URL languageCode: en-us title: \u0026lt;Your Nmae\u0026gt; # Your blog title theme: \u0026lt;theme_name\u0026gt; # The theme you want to use enableInlineShortcodes: true # Enable shortcodes enableEmoji: true # Enable emoji enableRobotsTXT: true # Enable robots.txt hasCJKLanguage: true # Enable CJK language support buildDrafts: false buildFuture: false buildExpired: false paginate: 15 # Number of articles per page minify: disableXML: true minifyOutput: true permalinks: # URL format post: \u0026#34;/:title/\u0026#34; defaultContentLanguage: en # Default language defaultContentLanguageInSubdir: true languages: en: languageName: \u0026#34;English\u0026#34; weight: 1 menu: main: - name: Articles url: posts/ weight: 1 - name: Tags url: tags/ weight: 10 - name: Search url: search/ weight: 11 zh: languageName: \u0026#34;中文\u0026#34; weight: 2 menu: main: - name: 文章 url: posts/ weight: 1 - name: 标签 url: tags/ weight: 10 - name: 搜索 url: search/ weight: 11 params: socialIcons: - name: github title: View Source on Github url: \u0026#34;https://github.com/ryanwooa\u0026#34; - name: Instagram url: \u0026#34;https://www.instagram.com/ryanwu5_/\u0026#34; - name: X url: \u0026#34;https://twitter.com/nzw897\u0026#34; - name: linkedin url: \u0026#34;https://www.linkedin.com/in/ryan-wu-9b8161268/\u0026#34; ShowBreadCrumbs: true ShowRelatedPosts: true ShowPostNavLinks: true ShowCodeCopyButtons: true ShowReadingTime: true label: icon: \u0026#34;q3.png\u0026#34; env: production author: Ryan Wu defaultTheme: auto disableThemeToggle: false DateFormat: \u0026#34;2006-01-02\u0026#34; ShowShareButtons: true ShowReadingTime: true # disableSpecialistPost: true displayFullLangName: true ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: true hideFooter: false #hide footer ShowWordCounts: true VisitCount: true ShowLastMod: true #show last modified date ShowToc: true # show table of contents TocOpen: true # expand table of contents by default assets: favicon: \u0026#34;q3.png\u0026#34; favicon16x16: \u0026#34;q3.png\u0026#34; favicon32x32: \u0026#34;q3.png\u0026#34; apple_touch_icon: \u0026#34;q3.png\u0026#34; safari_pinned_tab: \u0026#34;q3.png\u0026#34; outputs: home: - HTML - RSS - JSON # necessary for search taxonomies: tag: tags category: categories 4. Install Hugo theme There are many themes to choose from in the Hugo theme , and you can choose a theme according to your preferences. Taking PaperMod as an example here.\nAccording PaperMod Install/Update ，it can be installed using the following command：\ngit submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive # needed when you reclone your repo (submodules may not get cloned automatically) Then you can see that the newly installed theme folder is added to the themes folder.\nConfigure it in hugo.yml file：\ntheme: PaperMod For more PaperMod function you can refer to PaperMod - Features 5. New post If you want to create a new article, you can use the following command to create a new Markdown file:\nhugo new xxx.md hugo new posts/xxx.md # If you want to create a new article in the posts folder The Markdown file created by this command will automatically include some basic information, such as the article title, date, etc. You can edit the article content in the Markdown file.\ndraft = true shows that this article is currently a draft. If you want the article to be displayed on the website, you need to set draft to false or delete this line.\n6. Preview and debug After creating the article, you can use the following command to preview the website locally:\nhugo server Open your browser and navigate to http://localhost:1313\n7. Deploy to Github Pages using Github Action GitHub Actions is a CI/CD platform that can be used to automatically execute build, test, and deployment pipelines. We can use Github Action to automatically deploy the Hugo blog to Github Pages.\n7.1 Create Workflow In the root directory of the project, create a .github/workflows folder, and create a workflow file with a .yml extension. My GitHub Action automatically publishes the file main.yml example configuration is as follows:\nname: GitHub Pages on: push: branches: - main pull_request: jobs: deploy: runs-on: ubuntu-22.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v4 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true # use Hugo extended version - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: personal_token: ${{ secrets.PERSONAL_BLOG}} # replace with your own token external_repository: ryanwooa/ryanwooa.github.io # replace with your own repository publish_dir: ./public #cname: www.example.com # custom domain secrets.PERSONAL_BLOG is a personal access token that is generated in the Settings-\u0026gt;Developer settings-\u0026gt;Personal access tokens of the personal account, and requires the repo and workflow permissions.\nAnd you need to add the secrets in the repository settings: Settings-\u0026gt;Secrets for automatic deployment of Hugo Blog to GitHub Pages.\n7.2 Publish to Github Pages After completing the above configuration, every time you modify the article locally, you only need to push the modification to the GitHub repository, and GitHub Action will deploy the web page generated by Hugo to the gh-pages branch of the Github Pages repository.\nSet the deploy branch to gh-pages in the settings of the Github Pages repository, so you can access your blog through https://username.github.io.\n8. Reference 如何用 GitHub Pages + Hugo 搭建个人博客 Hugo + GitHub Action，搭建你的博客自动发布系统 [置顶] hugo博客搭建 | PaperMod主题 Hugo Documentation Github Pages quickstart ","permalink":"https://ryanwooa.github.io/en/posts/tech/hugo+papermod/","summary":"1. Introduction 1.1 What is Hugo Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again. 1.2 What is Github Pages GitHub Pages is a static site hosting service that directly retrieves HTML, CSS, and JavaScript files from the repository on GitHub, (optional) runs the files through the build process, and then publishes the website. Users can","title":"Create a blog with Hugo and Github Pages"},{"content":"Welcome to my blog! This is the first post. I\u0026rsquo;m so excited to share my thoughts with you. ","permalink":"https://ryanwooa.github.io/en/posts/life/helloworld/","summary":"Welcome to my blog! This is the first post. I\u0026rsquo;m so excited to share my thoughts with you. ","title":"Hello World"},{"content":"You can leave a message here. I will get back to you as soon as possible.\n","permalink":"https://ryanwooa.github.io/en/messagebox/","summary":"You can leave a message here. I will get back to you as soon as possible.","title":"Message Box"}]